// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// User roles enum
enum UserRole {
  CONTRIBUTOR
  VIEWER // Founder role
}

// Lead status enum
enum LeadStatus {
  COLD
  WARM
  HOT
}

// Activity type enum
enum ActivityType {
  EMAIL
  CALL
  TEXT
  LINKEDIN
  PRODUCT_UPDATE
  GENERAL
}

// Project status enum
enum ProjectStatus {
  NOT_STARTED
  IN_PROGRESS
  ON_HOLD
  COMPLETED
  CANCELLED
}

// Product enum for Carm's Corner
enum Product {
  ECHO
  KALABRIA
  PHRAMES
  MAILBRIX
  PHARMABLOX
}

// Task priority enum
enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

// Response status enum
enum ResponseStatus {
  PENDING
  APPROVED
  REJECTED
  NEEDS_INFO
}

// User model
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  image         String?
  role          UserRole  @default(CONTRIBUTOR)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  activities    Activity[]
  comments      Comment[]
  contacts      Contact[]
  resources     Resource[]
  projects      Project[]
  sessions      Session[]
  accounts      Account[]
  carmTasks     CarmTask[]
  carmResponses CarmResponse[]
}

// Activity feed model
model Activity {
  id            String       @id @default(cuid())
  content       String
  type          ActivityType @default(GENERAL)
  metadata      Json?        // Store additional data like duration for calls, subject for emails, etc.
  
  // Relations
  userId        String
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  contactId     String?
  contact       Contact?     @relation(fields: [contactId], references: [id], onDelete: SetNull)
  
  projectId     String?
  project       Project?     @relation(fields: [projectId], references: [id], onDelete: SetNull)
  
  resourceId    String?
  resource      Resource?    @relation(fields: [resourceId], references: [id], onDelete: SetNull)
  
  comments      Comment[]
  carmTasks     CarmTask[]
  productMentions ProductMention[]
  
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  
  @@index([userId])
  @@index([createdAt])
}

// Contacts model
model Contact {
  id            String      @id @default(cuid())
  name          String
  email         String?
  phone         String?
  company       String?
  position      String?
  linkedinUrl   String?
  leadStatus    LeadStatus  @default(COLD)
  notes         String?
  photo         String?     // File path for contact photo
  
  // Relations
  userId        String
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  activities    Activity[]
  
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  
  @@index([userId])
  @@index([leadStatus])
}

// Resource type enum
enum ResourceType {
  DOCUMENTATION
  ASSETS
  TEMPLATES
  LEGAL
  UPDATES
  TRAINING
  GENERAL
}

// Resources model
model Resource {
  id            String        @id @default(cuid())
  title         String
  description   String?
  type          ResourceType  @default(GENERAL)
  product       Product?      // Which product this resource belongs to (null for general)
  url           String?       // For external links
  filePath      String?       // For uploaded files
  fileName      String?       // Original file name
  fileSize      Int?          // File size in bytes
  mimeType      String?       // File MIME type
  version       String?       // Version number (e.g., "1.0", "2.1")
  tags          Json?         // Array of tags for flexible categorization
  downloadCount Int           @default(0)
  lastAccessed  DateTime?
  isPublic      Boolean       @default(true) // Whether viewers can access
  
  // Relations
  userId        String
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  activities    Activity[]
  
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  
  @@index([userId])
  @@index([product])
  @@index([type])
}

// Projects model
model Project {
  id              String        @id @default(cuid())
  title           String
  description     String?
  status          ProjectStatus @default(NOT_STARTED)
  estimatedDate   DateTime?
  completedDate   DateTime?
  progress        Int           @default(0) // 0-100 percentage
  
  // Relations
  userId          String
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  activities      Activity[]
  
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  @@index([userId])
  @@index([status])
}

// Comments model for founder feedback
model Comment {
  id            String      @id @default(cuid())
  content       String
  
  // Relations
  userId        String
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  activityId    String
  activity      Activity    @relation(fields: [activityId], references: [id], onDelete: Cascade)
  
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  
  @@index([activityId])
}

// NextAuth.js models
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Carm's Corner - Task model for questions/approvals
model CarmTask {
  id            String          @id @default(cuid())
  title         String
  description   String
  product       Product
  priority      TaskPriority    @default(MEDIUM)
  dueDate       DateTime?
  
  // Relations
  userId        String
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  activityId    String?
  activity      Activity?       @relation(fields: [activityId], references: [id], onDelete: SetNull)
  
  responses     CarmResponse[]
  
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  
  @@index([userId])
  @@index([product])
  @@index([priority])
}

// Carm's response to tasks
model CarmResponse {
  id            String          @id @default(cuid())
  content       String?
  status        ResponseStatus  @default(PENDING)
  notes         String?
  
  // Relations
  userId        String
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  taskId        String
  task          CarmTask        @relation(fields: [taskId], references: [id], onDelete: Cascade)
  
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  
  @@index([taskId])
  @@index([status])
}

// Track product mentions in activities
model ProductMention {
  id            String          @id @default(cuid())
  product       Product
  mentionText   String          // The actual text that mentioned the product
  context       String?         // Surrounding context for better understanding
  
  // Relations
  activityId    String
  activity      Activity        @relation(fields: [activityId], references: [id], onDelete: Cascade)
  
  createdAt     DateTime        @default(now())
  
  @@index([activityId])
  @@index([product])
}
